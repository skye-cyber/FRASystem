{% extends 'index.html' %}
<!DOCTYPE html>
<html>
<head>
    <title>Face Recognition Attendance System</title>
    {% load static %}
    {% block styles %}
    <link href="{% static 'css/styles2.css' %}" rel="stylesheet">
    <link href="{% static 'css/profile.css' %}" rel="stylesheet">
    {% endblock %}
</head>
{% block bodystart %}
{% with bg_image='images/bg3.png' %}
<body style="background-image: url('{% static bg_image %}');" class="font-sans leading-normal tracking-normal bg-cover">
{% endwith %}
  {% endblock %}

  <nav class="flex items-center justify-between bg-blue-800 p-6">

    <button id="dropdown-button" class="font-bold bg-blue-500 rounded-lg px-4 py-2" type="button" onclick="toggleDropdown()">
      Menu
    </button>

    {% block navbar %}
    <ul id="dropdown-menu" style="display:none; z-index: 999; position: fixed; box-shadow: 0px 0px 0px 4px deepskyblue;" class="menu-hover dropdown-menu w-fit items-center text-gray-200 dropdown-container absolute ml-2 mt-10 w-48 bg-white rounded-lg overflow-hidden shadow-md">
      <li class="px-4 py-2 border-b border-gray-200">
        <a href="{% url 'clock_in' %}" class="menu-hover text-gray-600 hover:text-gray-900">Clock In</a>
      </li>
      <li class="px-4 py-2 border-b border-gray-200">
        <a href="{% url 'deleteAccount' %}" class="menu-hover text-gray-600 hover:text-gray-900">Delete account</a>
      </li>
      <li class="px-4 py-2 border-b border-gray-200">
        <a href="{% url 'unenroll' %}" class="menu-hover text-gray-600 hover:text-gray-900">Delete FRA Enrollment</a>
      </li>
      <li class="px-4 py-2 border-b border-gray-200">
        <a href="{% url 'logout' %}" class="menu-hover text-gray-600 hover:text-gray-900">Logout</a>
      </li>
      <li class="px-4 py-2 border-b border-gray-200">
        <a href="{% url 'home' %}" class="menu-hover text-gray-600 hover:text-gray-900">üè† Home</a>
      </li>
    </ul>
    {% endblock %}
  </nav>

  {% block content %}
  <section class="container mx-auto px-6 py-2">
    <h1 class="text-5xl text-center text-white font-bold mb-12">User Profile</h1>

    <div class="flex flex-wrap">
      <!-- Profile Photo Section -->
      <div class="w-full md:w-1/3 p-6">
        <div class="bg-white text-gray-600 rounded-t overflow-hidden shadow">
          <div class="p-8 text-3xl font-bold text-center border-b-4">Profile Photo</div>
        {% for enrollment in enrollment_data %}
          <img class="circle-image mx-auto mt-6 mb-6 object-cover h-64 w-full"
            src="{{ enrollment.photo3_url }}" alt="Profile photo">
        {% endfor %}

        </div>
      </div>

      <!-- User Details and Attendance Reports Section -->
      <div class="profile w-full md:w-2/3 p-6">
        <!-- User Details -->
        <div class="bg-white text-gray-600 rounded-t overflow-hidden shadow mb-8">
          <div class="p-16 text-3xl font-bold text-center border-b-4">User Details</div>
          <div class="p-8">
            <p class="text-xl profile"><strong>Username:</strong> {{ user }}</p>
            <p class="text-xl"><strong>Full Name:</strong> {{ user.first_name }} {{ user.last_name }}</p>
            <p class="text-xl"><strong>Email:</strong> {{ user.email }}</p>
            <p class="text-xl"><strong>Status:</strong> <i class="text-green-500">{{ user.status }}</i></p>
            <p class="text-xl"><strong>SignUp Date:</strong> {{ user.date_joined }}</p>
          </div>
        </div>

        <!-- Attendance Reports -->
        <div class="bg-white text-gray-600 rounded-b overflow-hidden shadow">
          <div class="p-8 text-3xl font-bold text-center border-b-4">Attendance Reports</div>
          <div class="p-8">
            <p class="text-xl">Clock-in Records:</p>
            <ul>
              {% for record in clock_in_data %}
              <li>{{ record.name }} clocked in at {{ record.clock_in_time }}</li>
              {% endfor %}
            </ul>
          </div>
        </div>
      </div>
    </div>
  </section>

  <script>
    let isDisplayed = false;

function toggleDropdown() {
  const ops = document.getElementById('dropdown-menu');

  if (!isDisplayed) {
      // Show the dropdown menu
      //ops.style.display = "grid";
      isDisplayed = true;

      // Hide menu once mouse leaves it
      ops.addEventListener('mouseleave', () => {
          ops.style.display = "none";
          isDisplayed = false;
      });

  } else {
      // Hide the dropdown menu
      ops.style.display = "none";
      isDisplayed = false;
  }
}

// Optional: Hide the dropdown when clicking outside or when the button is clicked again
document.addEventListener('click', function(event) {
  const ops = document.getElementById('dropdown-menu');
  const button = document.getElementById('dropdown-button');

  if (!button.contains(event.target)) {
      ops.style.display = "none";
      isDisplayed = false;
  }
});
  function hide(){
     const ops = document.getElementById('ops');
     ops.addEventListener('mouseleave', () =>{
     ops.style.display = "none"
    });
};

    async function DeleteAccount() {
      if (confirm("Are you sure you want to delete your account?")) {
        const reason = prompt("Please enter the reason for deleting your account:", "");
        if (reason !== null) {
          console.log("Reason for deletion:", reason);

          const response = await fetch('/deleteAccount/', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRFToken': getCookie('csrftoken')
            },
            body: JSON.stringify({ reason })
          });

          const data = await response.json();
          document.getElementById('message').innerText = data.message;

          if (data.status === 'success') {
            alert(`Dear ${data.employee}, your account has been deleted.`);
            window.location.href = '/';
          } else {
            alert(`There was an error: ${data.message}`);
          }
        }
      }
    }

    function getCookie(name) {
      let cookieValue = null;
      if (document.cookie) {
        const cookies = document.cookie.split(';');
        for (let cookie of cookies) {
          const trimmed = cookie.trim();
          if (trimmed.startsWith(name + '=')) {
            cookieValue = decodeURIComponent(trimmed.slice(name.length + 1));
            break;
          }
        }
      }
      return cookieValue;
    }
  </script>
  {% endblock %}
</body>
</html>
